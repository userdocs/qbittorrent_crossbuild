name: qBittorrent libtorrent qt6 crossbuild package release

on:
  workflow_dispatch:
    inputs:
      skip_rerun:
        description: "Skip rerun?"
        required: true
        default: false
        type: boolean
      retries:
        description: "Number of rerun retries"
        required: true
        default: "2"
        type: choice
        options: ["1", "2", "3", "4", "5", "6", "7", "8", "9"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        name: [qbittorrent, qbittorrent-nox]
        os_id: [debian, ubuntu]
        os_version_id: [bookworm, jammy, noble]
        arch: [amd64, armhf, arm64]
        desktop_gui: ["", -D GUI=OFF]
        qt_features:
          [
            "-D QT_FEATURE_gui=ON -D QT_FEATURE_widgets=ON -D QT_FEATURE_dbus=ON",
            "-D QT_FEATURE_gui=OFF -D QT_FEATURE_widgets=OFF -D QT_FEATURE_dbus=OFF",
          ]
        include:
          - arch: amd64
            CHOST: "x86_64-linux-gnu"
            docker_arch: amd64
            docker_platform: linux/amd64
          - arch: armhf
            CHOST: "arm-linux-gnueabihf"
            docker_arch: arm32v7
            docker_platform: linux/arm/v7
          - arch: arm64
            CHOST: "aarch64-linux-gnu"
            docker_arch: arm64v8
            docker_platform: linux/arm64/v8
        exclude:
          - os_id: debian
            os_version_id: jammy
          - os_id: debian
            os_version_id: noble
          - os_id: ubuntu
            os_version_id: bookworm

          - name: qbittorrent
            desktop_gui: -D GUI=OFF
          - name: qbittorrent-nox
            desktop_gui: ""
          - name: qbittorrent
            qt_features: "-D QT_FEATURE_gui=OFF -D QT_FEATURE_widgets=OFF -D QT_FEATURE_dbus=OFF"
          - name: qbittorrent-nox
            qt_features: "-D QT_FEATURE_gui=ON -D QT_FEATURE_widgets=ON -D QT_FEATURE_dbus=ON"

    name: ${{ matrix.os_id }}:${{ matrix.os_version_id }} ${{ matrix.name }} ${{ matrix.arch }}
    env:
      CHOST: "${{ matrix.CHOST }}"
      CC: "${{ matrix.CHOST }}-gcc"
      AR: "${{ matrix.CHOST }}-ar"
      CXX: "${{ matrix.CHOST }}-g++"
      opt_dir_name: "opt/local"
      cxx_standard: "17"
      prerelease: false
      container_name: "multiarch"

    steps:
      - name: Host - Checkout action
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Host - set up qemu-user-static binfmt-support
        run: sudo apt install libpipeline1 qemu-user-static binfmt-support

      - name: Host - Create docker ${{ env.container_name }} ${{ matrix.arch }} container
        run: docker run --name ${container_name} -it -d -v ${{ github.workspace }}:/home/github ghcr.io/userdocs/dcb:${{ matrix.os_id }}-${{ matrix.os_version_id }}-${{ matrix.arch }}

      - name: Docker target - cmake and ninja download and install
        run: |
          docker exec ${container_name} curl -sNL "https://github.com/userdocs/cmake_crossbuild/releases/latest/download/${{ matrix.os_id }}-${{ matrix.os_version_id }}-cmake-${{ matrix.arch }}.deb" -o ${{ matrix.os_id }}-${{ matrix.os_version_id }}-cmake-${{ matrix.arch }}.deb
          docker exec ${container_name} dpkg -i ${{ matrix.os_id }}-${{ matrix.os_version_id }}-cmake-${{ matrix.arch }}.deb

      - name: Docker target - - apt-get install qt gui cross target deps
        if: matrix.qt_features == '-D QT_FEATURE_gui=ON -D QT_FEATURE_widgets=ON -D QT_FEATURE_dbus=ON'
        run: |
          docker exec ${container_name} apt-get install -y libglu1-mesa-dev:${{ matrix.arch }} libfontconfig1-dev:${{ matrix.arch }} libfreetype6-dev:${{ matrix.arch }} libx11-dev:${{ matrix.arch }} libx11-xcb-dev:${{ matrix.arch }}
          docker exec ${container_name} apt-get install -y libxfixes-dev:${{ matrix.arch }} libxi-dev:${{ matrix.arch }} libxrender-dev:${{ matrix.arch }} libxkbcommon-dev:${{ matrix.arch }} libxkbcommon-x11-dev:${{ matrix.arch }}
          docker exec ${container_name} apt-get install -y libxcb.*-dev:${{ matrix.arch }} libxkbcommon-dev:${{ matrix.arch }} libxkbcommon-x11-dev:${{ matrix.arch }} libxext-dev:${{ matrix.arch }} xmlstarlet:${{ matrix.arch }}

      - name: Docker target - Bootstrap the boost files
        run: |
          boost_version="$(git ls-remote -q -t --refs https://github.com/boostorg/boost.git | awk '{sub("refs/tags/boost-", "");sub("(.*)(rc|alpha|beta|-bgl)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n1)"
          curl -sNLk https://github.com/boostorg/boost/releases/latest/download/boost-${boost_version}-b2-nodocs.tar.xz -o "boost.tar.xz"
          tar xf "boost.tar.xz"
          printf '%s\n' "boost_version=${boost_version}" >> $GITHUB_ENV
          printf '%s\n' "boost_include_dir=boost-${boost_version}" >> $GITHUB_ENV

      - name: libtorrent - git clone
        run: docker exec -u github:github ${container_name} git clone --shallow-submodules --recurse-submodules https://github.com/arvidn/libtorrent.git /home/github/libtorrent

      - name: Docker host - libtorrent set latest release as branch
        run: printf '%s\n' "libtorrent_branch=$(git ls-remote -q -t --refs https://github.com/arvidn/libtorrent.git | awk '/\/v2/{sub("refs/tags/", "");sub("(.*)(-[^0-9].*)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n1)" >> $GITHUB_ENV

      - name: libtorrent - git checkout ${{ env.libtorrent_branch }}
        run: docker exec -u github:github -w /home/github/libtorrent ${container_name} git checkout ${{ env.libtorrent_branch }}

      - name: libtorrent - cmake configure
        run: |
          docker exec -u github:github -w /home/github/libtorrent ${container_name} cmake -Wno-dev -Wno-deprecated -G Ninja -B build \
          -D CMAKE_BUILD_TYPE="Release" \
          -D CMAKE_CXX_STANDARD="${{ env.cxx_standard }}" \
          -D BOOST_INCLUDEDIR="/home/github/${{ env.boost_include_dir }}" \
          -D CMAKE_INSTALL_PREFIX="/home/github/build/${{ env.opt_dir_name }}"

      - name: libtorrent - cmake build
        run: docker exec -u github:github -w /home/github/libtorrent ${container_name} cmake --build build

      - name: libtorrent - cmake install
        run: docker exec -u github:github -w /home/github/libtorrent ${container_name} cmake --install build

      - name: Set full libtorrent version to variable using strings
        run: printf '%s\n' "libtorrent_version=$(strings -d build/${{ env.opt_dir_name }}/lib/libtorrent-rasterbar.so | sed -rn 's|^libtorrent/(.*)|\1|p' | head -n 1)" >> $GITHUB_ENV

      - name: Docker target - qt get latest release info and set to env
        run: |
          qt_github_tag="$(git ls-remote -q -t --refs https://github.com/qt/qtbase.git | awk '/\/v6/{sub("refs/tags/", "");sub("(.*)(-[^0-9].*)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n1)"
          qt_version="${qt_github_tag/v/}"
          qt_short_version="${qt_version%.*}"
          printf '%s\n' "qt_version=${qt_version}" >> $GITHUB_ENV
          printf '%s\n' "qt_short_version=${qt_short_version}" >> $GITHUB_ENV

      - name: Docker target - qt set the download urls
        run: |
          printf '%s\n' "qt_qtbase_url=https://download.qt.io/official_releases/qt/${{ env.qt_short_version }}/${{ env.qt_version }}/submodules/qtbase-everywhere-src-${{ env.qt_version }}.tar.xz" >> $GITHUB_ENV
          printf '%s\n' "qt_qttools_url=https://download.qt.io/official_releases/qt/${{ env.qt_short_version }}/${{ env.qt_version }}/submodules/qttools-everywhere-src-${{ env.qt_version }}.tar.xz" >> $GITHUB_ENV
          printf '%s\n' "qt_qtsvg_url=https://download.qt.io/official_releases/qt/${{ env.qt_short_version }}/${{ env.qt_version }}/submodules/qtsvg-everywhere-src-${{ env.qt_version }}.tar.xz" >> $GITHUB_ENV

      - name: Docker target - qt qtbase - curl
        run: |
          docker exec -u github:github ${container_name} curl -sNL ${{ env.qt_qtbase_url }} -o qtbase.tar.xz
          docker exec -u github:github ${container_name} tar xf qtbase.tar.xz

      - name: Docker target - qt qtbase - cmake configure
        run: |
          docker exec -u github:github -w /home/github/qtbase-everywhere-src-${{ env.qt_version }} ${container_name} cmake -Wno-dev -Wno-deprecated -G Ninja -B build \
          -D QT_FEATURE_optimize_full=on \
          ${{ matrix.qt_features }} -D QT_FEATURE_openssl_linked=on \
          -D QT_FEATURE_system_pcre2=off -D QT_FEATURE_system_harfbuzz=off -D QT_FEATURE_system_freetype=off \
          -D QT_FEATURE_testlib=off -D QT_BUILD_EXAMPLES=off -D QT_BUILD_TESTS=off \
          -D CMAKE_BUILD_TYPE="release" \
          -D CMAKE_CXX_STANDARD="${{ env.cxx_standard }}" \
          -D CMAKE_PREFIX_PATH="/home/github/build/${{ env.opt_dir_name }}" \
          -D CMAKE_INSTALL_PREFIX="/home/github/build/${{ env.opt_dir_name }}"

      - name: Docker target - qt qtbase - cmake build
        run: docker exec -u github:github -w /home/github/qtbase-everywhere-src-${{ env.qt_version }} ${container_name} cmake --build build

      - name: Docker target - qt qtbase - cmake install
        run: docker exec -u github:github -w /home/github/qtbase-everywhere-src-${{ env.qt_version }} ${container_name} cmake --install build

      - name: Docker target - qt qtsvg - curl
        run: |
          docker exec -u github:github ${container_name} curl -sNL ${{ env.qt_qtsvg_url }} -o qtsvg.tar.xz
          docker exec -u github:github ${container_name} tar xf qtsvg.tar.xz

      - name: Docker target - qt qtsvg - cmake configure
        run: |
          docker exec -u github:github -w /home/github/qtsvg-everywhere-src-${{ env.qt_version }} ${container_name} cmake -Wno-dev -Wno-deprecated -G Ninja -B build \
          -D CMAKE_BUILD_TYPE="release" \
          -D CMAKE_CXX_STANDARD="${{ env.cxx_standard }}" \
          -D CMAKE_PREFIX_PATH="/home/github/build/${{ env.opt_dir_name }}" \
          -D CMAKE_INSTALL_PREFIX="/home/github/build/${{ env.opt_dir_name }}"

      - name: Docker target - qt qtsvg - cmake build
        run: docker exec -u github:github -w /home/github/qtsvg-everywhere-src-${{ env.qt_version }} ${container_name} cmake --build build

      - name: Docker target - qt qtsvg - cmake install
        run: docker exec -u github:github -w /home/github/qtsvg-everywhere-src-${{ env.qt_version }} ${container_name} cmake --install build

      - name: Docker target - qt qttools - curl
        run: |
          docker exec -u github:github ${container_name} curl -sNL ${{ env.qt_qttools_url }} -o qttools.tar.xz
          docker exec -u github:github ${container_name} tar xf qttools.tar.xz

      - name: Docker target - qt qttools - cmake configure
        run: |
          docker exec -u github:github -w /home/github/qttools-everywhere-src-${{ env.qt_version }} ${container_name} cmake -Wno-dev -Wno-deprecated -G Ninja -B build \
          -D CMAKE_BUILD_TYPE="release" \
          -D CMAKE_CXX_STANDARD="${{ env.cxx_standard }}" \
          -D CMAKE_PREFIX_PATH="/home/github/build/${{ env.opt_dir_name }}" \
          -D CMAKE_INSTALL_PREFIX="/home/github/build/${{ env.opt_dir_name }}"

      - name: Docker target - qt qttools - cmake build
        run: docker exec -u github:github -w /home/github/qttools-everywhere-src-${{ env.qt_version }} ${container_name} cmake --build build

      - name: Docker target - qt qttools - cmake install
        run: docker exec -u github:github -w /home/github/qttools-everywhere-src-${{ env.qt_version }} ${container_name} cmake --install build

      - name: Docker target - qt dejavu fonts - download and extract
        if: matrix.qt_features == '-D QT_FEATURE_gui=ON -D QT_FEATURE_widgets=ON -D QT_FEATURE_dbus=ON'
        run: |
          docker exec -u github:github -w /home/github ${container_name} curl -sNL "https://github.com/dejavu-fonts/dejavu-fonts/releases/download/version_2_37/dejavu-fonts-ttf-2.37.tar.bz2" -o dejavu-fonts-ttf-2.37.tar.bz2
          docker exec -u github:github -w /home/github ${container_name} curl -sNL "https://github.com/dejavu-fonts/dejavu-fonts/releases/download/version_2_37/dejavu-lgc-fonts-ttf-2.37.tar.bz2" -o dejavu-lgc-fonts-ttf-2.37.tar.bz2
          docker exec -u github:github -w /home/github ${container_name} mkdir -p /home/github/build/${{ env.opt_dir_name }}/lib/fonts
          docker exec -u github:github -w /home/github ${container_name} tar xf dejavu-fonts-ttf-2.37.tar.bz2 --strip-components=2 -C /home/github/build/${{ env.opt_dir_name }}/lib/fonts dejavu-fonts-ttf-2.37/ttf
          docker exec -u github:github -w /home/github ${container_name} tar xf dejavu-lgc-fonts-ttf-2.37.tar.bz2 --strip-components=2 -C /home/github/build/${{ env.opt_dir_name }}/lib/fonts dejavu-lgc-fonts-ttf-2.37/ttf

      - name: Docker target - qbittorrent set latest release as branch
        run: |
          printf '%s\n' "qbittorrent_branch=$(git ls-remote -q -t --refs https://github.com/qbittorrent/qBittorrent.git | awk '{sub("refs/tags/", "");sub("(.*)(-[^0-9].*|rc|alpha|beta)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n1)" >> $GITHUB_ENV

      - name: Docker target - qbittorrent - git clone
        run: docker exec -u github:github ${container_name} git clone --single-branch --branch "${{ env.qbittorrent_branch }}" --shallow-submodules --recurse-submodules --depth 1 https://github.com/qbittorrent/qBittorrent.git /home/github/qbittorrent

      - name: Docker target - qbittorrent cmake configure
        run: |
          docker exec -u github:github -w /home/github/qbittorrent ${container_name} cmake -Wno-dev -Wno-deprecated -G Ninja -B build \
          -D CMAKE_BUILD_TYPE="release" \
          -D QT6="ON" \
          -D CMAKE_CXX_STANDARD="${{ env.cxx_standard }}" \
          -D CMAKE_PREFIX_PATH="/home/github/build/${{ env.opt_dir_name }}" \
          -D BOOST_INCLUDEDIR="/home/github/${{ env.boost_include_dir }}" \
          ${{ matrix.desktop_gui }} \
          -D CMAKE_INSTALL_PREFIX="/home/github/build/${{ env.opt_dir_name }}"

      - name: Docker target - qbittorrent cmake build
        run: docker exec -u github:github -w /home/github/qbittorrent ${container_name} cmake --build build

      - name: Docker target - qbittorrent cmake install
        run: docker exec -u github:github -w /home/github/qbittorrent ${container_name} cmake --install build

      - name: Docker target - Set full qBittorrent version to variable
        run: |
          qbittorrent_version="${{ env.qbittorrent_branch }}"
          printf '%s\n' "qbittorrent_version=${qbittorrent_version/release-}" >> $GITHUB_ENV

      - name: Docker target - Set deb dependencies for qbittorrent-nox
        if: matrix.name == 'qbittorrent-nox'
        run: printf '%s\n' "qbittorrent-deb-deps=zlib1g,libgeoip1" >> $GITHUB_ENV

      - name: Docker target - Set deb dependencies for qbittorrent
        if: matrix.name == 'qbittorrent'
        run: printf '%s\n' "qbittorrent-deb-deps=zlib1g,libgeoip1,libglu1-mesa,libopengl0,libxcb-xinput0"  >> $GITHUB_ENV

      - name: Docker target - ldconfig - create /etc/ld.so.conf.d/qbittorrent.conf
        run: |
          docker exec -u github:github -w /home/github/build ${container_name} mkdir -p etc/ld.so.conf.d
          docker exec -u github:github -w /home/github/build/etc/ld.so.conf.d ${container_name} bash -c "printf '%s\n' '/${{ env.opt_dir_name }}/lib' > qbittorrent.conf"

      - name: Host - Create deb packages
        uses: jiro4989/build-deb-action@v4
        with:
          package: "${{ matrix.name }}"
          package_root: build
          maintainer: userdocs
          version: "${{ env.qbittorrent_version }}"
          depends: "${{ env.qbittorrent-deb-deps }}"
          arch: "${{ matrix.arch }}"
          desc: "${{ matrix.name }}-${{ matrix.arch }} for ${{ matrix.os_id }}-${{ matrix.os_version_id }}"

      - name: Host - Remove version from release name and use hyphens
        run: mv -f "${{ matrix.name }}_${{ env.qbittorrent_version }}_${{ matrix.arch }}.deb" "${{ matrix.os_id }}-${{ matrix.os_version_id }}-${{ matrix.name }}-${{ matrix.arch }}.deb"

      - name: Host - "Create release - tag - assets"
        uses: ncipollo/release-action@v1
        with:
          prerelease: ${{ env.prerelease }}
          artifacts: "${{ matrix.os_id }}-${{ matrix.os_version_id }}-${{ matrix.name }}-${{ matrix.arch }}.deb"
          replacesArtifacts: true
          tag: "${{ env.qbittorrent_version }}_${{ env.libtorrent_version }}"
          name: "qBittorrent ${{ env.qbittorrent_version }} libtorrent ${{ env.libtorrent_version }}"
          body: "qBittorrent and qBittorrent-nox built with cmake, qBittorrent github master, libtorrent RC_2_0, qt6 on amd64 arm64 armhf for Debian Bullseye Bookworm and Ubuntu Focal Jammy Noble"
          allowUpdates: true
          token: "${{ secrets.GITHUB_TOKEN }}"

  rerun_on_failure:
    needs: [build]
    if: >
      failure() &&
      ( needs.scheduled_defaults.outputs.skip_rerun == 'false' && needs.skip_duplicate_job.outputs.should_skip != 'true' )
    concurrency:
      group: ci-auto-rerun-failed-jobs
      cancel-in-progress: true
    permissions:
      actions: write
    runs-on: ubuntu-24.04-arm
    env:
      GH_TOKEN: "${{ secrets.AUTO_RERUN || github.token }}"
      github_repo: "" # To use ci-auto-rerun-failed-jobs.yml hosted in a remote repository else default to the current repository. Requires PAT token AUTO_RERUN
      retries: ${{ github.event.inputs.retries || '1' }}
      distinct_id: ${{ github.event.inputs.distinct_id }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: ci-auto-rerun-failed-jobs via ${{ env.github_repo || github.repository }}
        run: >
          gh workflow run ci-auto-rerun-failed-jobs-action.yml
          --repo "${github_repo:-$GITHUB_REPOSITORY}"
          -f github_repo=${GITHUB_REPOSITORY}
          -f run_id=${GITHUB_RUN_ID}
          -f attempts=${GITHUB_RUN_ATTEMPT}
          -f retries=${retries}
          -f distinct_id=${distinct_id}
